// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `DevicePrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Laboratory;

public interface DevicePrx extends Ice.ObjectPrx
{
    public void listen(ListenerPrx list, String accessToken)
        throws AccessDenied;

    public void listen(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx)
        throws AccessDenied;

    public Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken);

    public Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken, Ice.Callback __cb);

    public Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken, Callback_Device_listen __cb);

    public Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx, Callback_Device_listen __cb);

    public void end_listen(Ice.AsyncResult __result)
        throws AccessDenied;

    public void abandon(ListenerPrx list, String accessToken)
        throws AccessDenied;

    public void abandon(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx)
        throws AccessDenied;

    public Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken);

    public Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken, Ice.Callback __cb);

    public Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken, Callback_Device_abandon __cb);

    public Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx, Callback_Device_abandon __cb);

    public void end_abandon(Ice.AsyncResult __result)
        throws AccessDenied;

    public boolean use(String accessToken)
        throws AccessDenied;

    public boolean use(String accessToken, java.util.Map<String, String> __ctx)
        throws AccessDenied;

    public Ice.AsyncResult begin_use(String accessToken);

    public Ice.AsyncResult begin_use(String accessToken, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_use(String accessToken, Ice.Callback __cb);

    public Ice.AsyncResult begin_use(String accessToken, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_use(String accessToken, Callback_Device_use __cb);

    public Ice.AsyncResult begin_use(String accessToken, java.util.Map<String, String> __ctx, Callback_Device_use __cb);

    public boolean end_use(Ice.AsyncResult __result)
        throws AccessDenied;

    public void free(String accessToken)
        throws AccessDenied;

    public void free(String accessToken, java.util.Map<String, String> __ctx)
        throws AccessDenied;

    public Ice.AsyncResult begin_free(String accessToken);

    public Ice.AsyncResult begin_free(String accessToken, java.util.Map<String, String> __ctx);

    public Ice.AsyncResult begin_free(String accessToken, Ice.Callback __cb);

    public Ice.AsyncResult begin_free(String accessToken, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    public Ice.AsyncResult begin_free(String accessToken, Callback_Device_free __cb);

    public Ice.AsyncResult begin_free(String accessToken, java.util.Map<String, String> __ctx, Callback_Device_free __cb);

    public void end_free(Ice.AsyncResult __result)
        throws AccessDenied;
}
