// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `DevicePrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Laboratory;

public final class DevicePrxHelper extends Ice.ObjectPrxHelperBase implements DevicePrx
{
    public void
    abandon(ListenerPrx list, String accessToken)
        throws AccessDenied
    {
        abandon(list, accessToken, null, false);
    }

    public void
    abandon(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx)
        throws AccessDenied
    {
        abandon(list, accessToken, __ctx, true);
    }

    private void
    abandon(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws AccessDenied
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("abandon");
                __delBase = __getDelegate(false);
                _DeviceDel __del = (_DeviceDel)__delBase;
                __del.abandon(list, accessToken, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __abandon_name = "abandon";

    public Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken)
    {
        return begin_abandon(list, accessToken, null, false, null);
    }

    public Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx)
    {
        return begin_abandon(list, accessToken, __ctx, true, null);
    }

    public Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken, Ice.Callback __cb)
    {
        return begin_abandon(list, accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_abandon(list, accessToken, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken, Callback_Device_abandon __cb)
    {
        return begin_abandon(list, accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx, Callback_Device_abandon __cb)
    {
        return begin_abandon(list, accessToken, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_abandon(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__abandon_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __abandon_name, __cb);
        try
        {
            __result.__prepare(__abandon_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            ListenerPrxHelper.__write(__os, list);
            __os.writeString(accessToken);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_abandon(Ice.AsyncResult __result)
        throws AccessDenied
    {
        Ice.AsyncResult.__check(__result, this, __abandon_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(AccessDenied __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    free(String accessToken)
        throws AccessDenied
    {
        free(accessToken, null, false);
    }

    public void
    free(String accessToken, java.util.Map<String, String> __ctx)
        throws AccessDenied
    {
        free(accessToken, __ctx, true);
    }

    private void
    free(String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws AccessDenied
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("free");
                __delBase = __getDelegate(false);
                _DeviceDel __del = (_DeviceDel)__delBase;
                __del.free(accessToken, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __free_name = "free";

    public Ice.AsyncResult begin_free(String accessToken)
    {
        return begin_free(accessToken, null, false, null);
    }

    public Ice.AsyncResult begin_free(String accessToken, java.util.Map<String, String> __ctx)
    {
        return begin_free(accessToken, __ctx, true, null);
    }

    public Ice.AsyncResult begin_free(String accessToken, Ice.Callback __cb)
    {
        return begin_free(accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_free(String accessToken, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_free(accessToken, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_free(String accessToken, Callback_Device_free __cb)
    {
        return begin_free(accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_free(String accessToken, java.util.Map<String, String> __ctx, Callback_Device_free __cb)
    {
        return begin_free(accessToken, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_free(String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__free_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __free_name, __cb);
        try
        {
            __result.__prepare(__free_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(accessToken);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_free(Ice.AsyncResult __result)
        throws AccessDenied
    {
        Ice.AsyncResult.__check(__result, this, __free_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(AccessDenied __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public void
    listen(ListenerPrx list, String accessToken)
        throws AccessDenied
    {
        listen(list, accessToken, null, false);
    }

    public void
    listen(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx)
        throws AccessDenied
    {
        listen(list, accessToken, __ctx, true);
    }

    private void
    listen(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws AccessDenied
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("listen");
                __delBase = __getDelegate(false);
                _DeviceDel __del = (_DeviceDel)__delBase;
                __del.listen(list, accessToken, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __listen_name = "listen";

    public Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken)
    {
        return begin_listen(list, accessToken, null, false, null);
    }

    public Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx)
    {
        return begin_listen(list, accessToken, __ctx, true, null);
    }

    public Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken, Ice.Callback __cb)
    {
        return begin_listen(list, accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_listen(list, accessToken, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken, Callback_Device_listen __cb)
    {
        return begin_listen(list, accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx, Callback_Device_listen __cb)
    {
        return begin_listen(list, accessToken, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_listen(ListenerPrx list, String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__listen_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __listen_name, __cb);
        try
        {
            __result.__prepare(__listen_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            ListenerPrxHelper.__write(__os, list);
            __os.writeString(accessToken);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_listen(Ice.AsyncResult __result)
        throws AccessDenied
    {
        Ice.AsyncResult.__check(__result, this, __listen_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(AccessDenied __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public boolean
    use(String accessToken)
        throws AccessDenied
    {
        return use(accessToken, null, false);
    }

    public boolean
    use(String accessToken, java.util.Map<String, String> __ctx)
        throws AccessDenied
    {
        return use(accessToken, __ctx, true);
    }

    private boolean
    use(String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws AccessDenied
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("use");
                __delBase = __getDelegate(false);
                _DeviceDel __del = (_DeviceDel)__delBase;
                return __del.use(accessToken, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __use_name = "use";

    public Ice.AsyncResult begin_use(String accessToken)
    {
        return begin_use(accessToken, null, false, null);
    }

    public Ice.AsyncResult begin_use(String accessToken, java.util.Map<String, String> __ctx)
    {
        return begin_use(accessToken, __ctx, true, null);
    }

    public Ice.AsyncResult begin_use(String accessToken, Ice.Callback __cb)
    {
        return begin_use(accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_use(String accessToken, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_use(accessToken, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_use(String accessToken, Callback_Device_use __cb)
    {
        return begin_use(accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_use(String accessToken, java.util.Map<String, String> __ctx, Callback_Device_use __cb)
    {
        return begin_use(accessToken, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_use(String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__use_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __use_name, __cb);
        try
        {
            __result.__prepare(__use_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(accessToken);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public boolean end_use(Ice.AsyncResult __result)
        throws AccessDenied
    {
        Ice.AsyncResult.__check(__result, this, __use_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(AccessDenied __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        boolean __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readBool();
        __is.endReadEncaps();
        return __ret;
    }

    public static DevicePrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        DevicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (DevicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    DevicePrxHelper __h = new DevicePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DevicePrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        DevicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (DevicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    DevicePrxHelper __h = new DevicePrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DevicePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DevicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    DevicePrxHelper __h = new DevicePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DevicePrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        DevicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    DevicePrxHelper __h = new DevicePrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DevicePrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        DevicePrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (DevicePrx)__obj;
            }
            catch(ClassCastException ex)
            {
                DevicePrxHelper __h = new DevicePrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static DevicePrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DevicePrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            DevicePrxHelper __h = new DevicePrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Laboratory::Device"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _DeviceDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _DeviceDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, DevicePrx v)
    {
        __os.writeProxy(v);
    }

    public static DevicePrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            DevicePrxHelper result = new DevicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
