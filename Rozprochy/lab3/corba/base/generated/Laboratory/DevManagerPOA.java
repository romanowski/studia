package Laboratory;


/**
* Laboratory/DevManagerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Laboratory.idl
* wtorek, 24 kwiecie≈Ñ 2012 11:40:18 CEST
*/

public abstract class DevManagerPOA extends org.omg.PortableServer.Servant
 implements Laboratory.DevManagerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getDevsInfo", new java.lang.Integer (0));
    _methods.put ("viewDev", new java.lang.Integer (1));
    _methods.put ("reserveDev", new java.lang.Integer (2));
    _methods.put ("relaseDev", new java.lang.Integer (3));
    _methods.put ("disconnect", new java.lang.Integer (4));
    _methods.put ("connect", new java.lang.Integer (5));
    _methods.put ("devState", new java.lang.Integer (6));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // Laboratory/DevManager/getDevsInfo
       {
         Laboratory.DevS $result[] = null;
         $result = this.getDevsInfo ();
         out = $rh.createReply();
         Laboratory.DevSeqHelper.write (out, $result);
         break;
       }

       case 1:  // Laboratory/DevManager/viewDev
       {
         String ID = in.read_string ();
         Laboratory.DevS $result = null;
         $result = this.viewDev (ID);
         out = $rh.createReply();
         Laboratory.DevSHelper.write (out, $result);
         break;
       }

       case 2:  // Laboratory/DevManager/reserveDev
       {
         try {
           String ID = in.read_string ();
           String accessToken = in.read_string ();
           Laboratory.Dev $result = null;
           $result = this.reserveDev (ID, accessToken);
           out = $rh.createReply();
           Laboratory.DevHelper.write (out, $result);
         } catch (Laboratory.ApplicationException $ex) {
           out = $rh.createExceptionReply ();
           Laboratory.ApplicationExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // Laboratory/DevManager/relaseDev
       {
         try {
           String ID = in.read_string ();
           String accessToken = in.read_string ();
           this.relaseDev (ID, accessToken);
           out = $rh.createReply();
         } catch (Laboratory.ApplicationException $ex) {
           out = $rh.createExceptionReply ();
           Laboratory.ApplicationExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // Laboratory/DevManager/disconnect
       {
         try {
           String accessToken = in.read_string ();
           this.disconnect (accessToken);
           out = $rh.createReply();
         } catch (Laboratory.ApplicationException $ex) {
           out = $rh.createExceptionReply ();
           Laboratory.ApplicationExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // Laboratory/DevManager/connect
       {
         try {
           String $result = null;
           $result = this.connect ();
           out = $rh.createReply();
           out.write_string ($result);
         } catch (Laboratory.ApplicationException $ex) {
           out = $rh.createExceptionReply ();
           Laboratory.ApplicationExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // Laboratory/DevManager/devState
       {
         String ID = in.read_string ();
         Laboratory.State $result = null;
         $result = this.devState (ID);
         out = $rh.createReply();
         Laboratory.StateHelper.write (out, $result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Laboratory/DevManager:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public DevManager _this() 
  {
    return DevManagerHelper.narrow(
    super._this_object());
  }

  public DevManager _this(org.omg.CORBA.ORB orb) 
  {
    return DevManagerHelper.narrow(
    super._this_object(orb));
  }


} // class DevManagerPOA
