package Laboratory;


/**
* Laboratory/_DevManagerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from Laboratory.idl
* wtorek, 24 kwiecie≈Ñ 2012 11:40:18 CEST
*/

public class _DevManagerStub extends org.omg.CORBA.portable.ObjectImpl implements Laboratory.DevManager
{

  public Laboratory.DevS[] getDevsInfo ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getDevsInfo", true);
                $in = _invoke ($out);
                Laboratory.DevS $result[] = Laboratory.DevSeqHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getDevsInfo (        );
            } finally {
                _releaseReply ($in);
            }
  } // getDevsInfo

  public Laboratory.DevS viewDev (String ID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("viewDev", true);
                $out.write_string (ID);
                $in = _invoke ($out);
                Laboratory.DevS $result = Laboratory.DevSHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return viewDev (ID        );
            } finally {
                _releaseReply ($in);
            }
  } // viewDev

  public Laboratory.Dev reserveDev (String ID, String accessToken) throws Laboratory.ApplicationException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("reserveDev", true);
                $out.write_string (ID);
                $out.write_string (accessToken);
                $in = _invoke ($out);
                Laboratory.Dev $result = Laboratory.DevHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Laboratory/ApplicationException:1.0"))
                    throw Laboratory.ApplicationExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return reserveDev (ID, accessToken        );
            } finally {
                _releaseReply ($in);
            }
  } // reserveDev

  public void relaseDev (String ID, String accessToken) throws Laboratory.ApplicationException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("relaseDev", true);
                $out.write_string (ID);
                $out.write_string (accessToken);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Laboratory/ApplicationException:1.0"))
                    throw Laboratory.ApplicationExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                relaseDev (ID, accessToken        );
            } finally {
                _releaseReply ($in);
            }
  } // relaseDev

  public void disconnect (String accessToken) throws Laboratory.ApplicationException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("disconnect", true);
                $out.write_string (accessToken);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Laboratory/ApplicationException:1.0"))
                    throw Laboratory.ApplicationExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                disconnect (accessToken        );
            } finally {
                _releaseReply ($in);
            }
  } // disconnect

  public String connect () throws Laboratory.ApplicationException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("connect", true);
                $in = _invoke ($out);
                String $result = Laboratory.StrHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:Laboratory/ApplicationException:1.0"))
                    throw Laboratory.ApplicationExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return connect (        );
            } finally {
                _releaseReply ($in);
            }
  } // connect

  public Laboratory.State devState (String ID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("devState", true);
                $out.write_string (ID);
                $in = _invoke ($out);
                Laboratory.State $result = Laboratory.StateHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return devState (ID        );
            } finally {
                _releaseReply ($in);
            }
  } // devState

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:Laboratory/DevManager:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _DevManagerStub
