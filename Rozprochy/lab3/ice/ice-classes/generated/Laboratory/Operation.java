// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `Operation.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Laboratory;

public class Operation implements java.lang.Cloneable, java.io.Serializable
{
    public String ID;

    public String[] paramsTypes;

    public Operation()
    {
    }

    public Operation(String ID, String[] paramsTypes)
    {
        this.ID = ID;
        this.paramsTypes = paramsTypes;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Operation _r = null;
        try
        {
            _r = (Operation)rhs;
        }
        catch(ClassCastException ex)
        {
        }

        if(_r != null)
        {
            if(ID != _r.ID)
            {
                if(ID == null || _r.ID == null || !ID.equals(_r.ID))
                {
                    return false;
                }
            }
            if(!java.util.Arrays.equals(paramsTypes, _r.paramsTypes))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 0;
        if(ID != null)
        {
            __h = 5 * __h + ID.hashCode();
        }
        if(paramsTypes != null)
        {
            for(int __i0 = 0; __i0 < paramsTypes.length; __i0++)
            {
                if(paramsTypes[__i0] != null)
                {
                    __h = 5 * __h + paramsTypes[__i0].hashCode();
                }
            }
        }
        return __h;
    }

    public java.lang.Object
    clone()
    {
        java.lang.Object o = null;
        try
        {
            o = super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return o;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeString(ID);
        strSeqHelper.write(__os, paramsTypes);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        ID = __is.readString();
        paramsTypes = strSeqHelper.read(__is);
    }
}
