// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `DevPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Laboratory;

public final class DevPrxHelper extends Ice.ObjectPrxHelperBase implements DevPrx
{
    public void
    doOperation(String name, String[] params)
        throws BadOperation
    {
        doOperation(name, params, null, false);
    }

    public void
    doOperation(String name, String[] params, java.util.Map<String, String> __ctx)
        throws BadOperation
    {
        doOperation(name, params, __ctx, true);
    }

    private void
    doOperation(String name, String[] params, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws BadOperation
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("doOperation");
                __delBase = __getDelegate(false);
                _DevDel __del = (_DevDel)__delBase;
                __del.doOperation(name, params, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __doOperation_name = "doOperation";

    public Ice.AsyncResult begin_doOperation(String name, String[] params)
    {
        return begin_doOperation(name, params, null, false, null);
    }

    public Ice.AsyncResult begin_doOperation(String name, String[] params, java.util.Map<String, String> __ctx)
    {
        return begin_doOperation(name, params, __ctx, true, null);
    }

    public Ice.AsyncResult begin_doOperation(String name, String[] params, Ice.Callback __cb)
    {
        return begin_doOperation(name, params, null, false, __cb);
    }

    public Ice.AsyncResult begin_doOperation(String name, String[] params, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_doOperation(name, params, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_doOperation(String name, String[] params, Callback_Dev_doOperation __cb)
    {
        return begin_doOperation(name, params, null, false, __cb);
    }

    public Ice.AsyncResult begin_doOperation(String name, String[] params, java.util.Map<String, String> __ctx, Callback_Dev_doOperation __cb)
    {
        return begin_doOperation(name, params, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_doOperation(String name, String[] params, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__doOperation_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __doOperation_name, __cb);
        try
        {
            __result.__prepare(__doOperation_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(name);
            strSeqHelper.write(__os, params);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_doOperation(Ice.AsyncResult __result)
        throws BadOperation
    {
        Ice.AsyncResult.__check(__result, this, __doOperation_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(BadOperation __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public DevS
    info()
    {
        return info(null, false);
    }

    public DevS
    info(java.util.Map<String, String> __ctx)
    {
        return info(__ctx, true);
    }

    private DevS
    info(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("info");
                __delBase = __getDelegate(false);
                _DevDel __del = (_DevDel)__delBase;
                return __del.info(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __info_name = "info";

    public Ice.AsyncResult begin_info()
    {
        return begin_info(null, false, null);
    }

    public Ice.AsyncResult begin_info(java.util.Map<String, String> __ctx)
    {
        return begin_info(__ctx, true, null);
    }

    public Ice.AsyncResult begin_info(Ice.Callback __cb)
    {
        return begin_info(null, false, __cb);
    }

    public Ice.AsyncResult begin_info(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_info(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_info(Callback_Dev_info __cb)
    {
        return begin_info(null, false, __cb);
    }

    public Ice.AsyncResult begin_info(java.util.Map<String, String> __ctx, Callback_Dev_info __cb)
    {
        return begin_info(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_info(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__info_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __info_name, __cb);
        try
        {
            __result.__prepare(__info_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public DevS end_info(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __info_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        DevS __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new DevS();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public Operation[]
    operations()
    {
        return operations(null, false);
    }

    public Operation[]
    operations(java.util.Map<String, String> __ctx)
    {
        return operations(__ctx, true);
    }

    private Operation[]
    operations(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("operations");
                __delBase = __getDelegate(false);
                _DevDel __del = (_DevDel)__delBase;
                return __del.operations(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __operations_name = "operations";

    public Ice.AsyncResult begin_operations()
    {
        return begin_operations(null, false, null);
    }

    public Ice.AsyncResult begin_operations(java.util.Map<String, String> __ctx)
    {
        return begin_operations(__ctx, true, null);
    }

    public Ice.AsyncResult begin_operations(Ice.Callback __cb)
    {
        return begin_operations(null, false, __cb);
    }

    public Ice.AsyncResult begin_operations(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_operations(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_operations(Callback_Dev_operations __cb)
    {
        return begin_operations(null, false, __cb);
    }

    public Ice.AsyncResult begin_operations(java.util.Map<String, String> __ctx, Callback_Dev_operations __cb)
    {
        return begin_operations(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_operations(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__operations_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __operations_name, __cb);
        try
        {
            __result.__prepare(__operations_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Operation[] end_operations(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __operations_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        Operation[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = OperationSeqHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public static DevPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        DevPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (DevPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    DevPrxHelper __h = new DevPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DevPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        DevPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (DevPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    DevPrxHelper __h = new DevPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DevPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DevPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    DevPrxHelper __h = new DevPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DevPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        DevPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    DevPrxHelper __h = new DevPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DevPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        DevPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (DevPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                DevPrxHelper __h = new DevPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static DevPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DevPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            DevPrxHelper __h = new DevPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Laboratory::Dev"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _DevDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _DevDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, DevPrx v)
    {
        __os.writeProxy(v);
    }

    public static DevPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            DevPrxHelper result = new DevPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
