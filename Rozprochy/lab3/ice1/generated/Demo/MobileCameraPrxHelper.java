// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `MobileCameraPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Demo;

public final class MobileCameraPrxHelper extends Ice.ObjectPrxHelperBase implements MobileCameraPrx
{
    public String
    ID()
    {
        return ID(null, false);
    }

    public String
    ID(java.util.Map<String, String> __ctx)
    {
        return ID(__ctx, true);
    }

    private String
    ID(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("ID");
                __delBase = __getDelegate(false);
                _MobileCameraDel __del = (_MobileCameraDel)__delBase;
                return __del.ID(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __ID_name = "ID";

    public Ice.AsyncResult begin_ID()
    {
        return begin_ID(null, false, null);
    }

    public Ice.AsyncResult begin_ID(java.util.Map<String, String> __ctx)
    {
        return begin_ID(__ctx, true, null);
    }

    public Ice.AsyncResult begin_ID(Ice.Callback __cb)
    {
        return begin_ID(null, false, __cb);
    }

    public Ice.AsyncResult begin_ID(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_ID(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_ID(Callback_Dev_ID __cb)
    {
        return begin_ID(null, false, __cb);
    }

    public Ice.AsyncResult begin_ID(java.util.Map<String, String> __ctx, Callback_Dev_ID __cb)
    {
        return begin_ID(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_ID(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__ID_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __ID_name, __cb);
        try
        {
            __result.__prepare(__ID_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_ID(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __ID_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public State
    getState()
    {
        return getState(null, false);
    }

    public State
    getState(java.util.Map<String, String> __ctx)
    {
        return getState(__ctx, true);
    }

    private State
    getState(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getState");
                __delBase = __getDelegate(false);
                _MobileCameraDel __del = (_MobileCameraDel)__delBase;
                return __del.getState(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getState_name = "getState";

    public Ice.AsyncResult begin_getState()
    {
        return begin_getState(null, false, null);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx)
    {
        return begin_getState(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getState(Ice.Callback __cb)
    {
        return begin_getState(null, false, __cb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getState(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getState(Callback_Dev_getState __cb)
    {
        return begin_getState(null, false, __cb);
    }

    public Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, Callback_Dev_getState __cb)
    {
        return begin_getState(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getState(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getState_name, __cb);
        try
        {
            __result.__prepare(__getState_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public State end_getState(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        StateHolder __ret = new StateHolder();
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __is.readObject(__ret);
        __is.readPendingObjects();
        __is.endReadEncaps();
        return __ret.value;
    }

    public String
    type()
    {
        return type(null, false);
    }

    public String
    type(java.util.Map<String, String> __ctx)
    {
        return type(__ctx, true);
    }

    private String
    type(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("type");
                __delBase = __getDelegate(false);
                _MobileCameraDel __del = (_MobileCameraDel)__delBase;
                return __del.type(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __type_name = "type";

    public Ice.AsyncResult begin_type()
    {
        return begin_type(null, false, null);
    }

    public Ice.AsyncResult begin_type(java.util.Map<String, String> __ctx)
    {
        return begin_type(__ctx, true, null);
    }

    public Ice.AsyncResult begin_type(Ice.Callback __cb)
    {
        return begin_type(null, false, __cb);
    }

    public Ice.AsyncResult begin_type(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_type(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_type(Callback_Dev_type __cb)
    {
        return begin_type(null, false, __cb);
    }

    public Ice.AsyncResult begin_type(java.util.Map<String, String> __ctx, Callback_Dev_type __cb)
    {
        return begin_type(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_type(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__type_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __type_name, __cb);
        try
        {
            __result.__prepare(__type_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_type(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __type_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public void
    move(int x, int y)
    {
        move(x, y, null, false);
    }

    public void
    move(int x, int y, java.util.Map<String, String> __ctx)
    {
        move(x, y, __ctx, true);
    }

    private void
    move(int x, int y, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _MobileCameraDel __del = (_MobileCameraDel)__delBase;
                __del.move(x, y, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __move_name = "move";

    public Ice.AsyncResult begin_move(int x, int y)
    {
        return begin_move(x, y, null, false, null);
    }

    public Ice.AsyncResult begin_move(int x, int y, java.util.Map<String, String> __ctx)
    {
        return begin_move(x, y, __ctx, true, null);
    }

    public Ice.AsyncResult begin_move(int x, int y, Ice.Callback __cb)
    {
        return begin_move(x, y, null, false, __cb);
    }

    public Ice.AsyncResult begin_move(int x, int y, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_move(x, y, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_move(int x, int y, Callback_Movable_move __cb)
    {
        return begin_move(x, y, null, false, __cb);
    }

    public Ice.AsyncResult begin_move(int x, int y, java.util.Map<String, String> __ctx, Callback_Movable_move __cb)
    {
        return begin_move(x, y, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_move(int x, int y, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __move_name, __cb);
        try
        {
            __result.__prepare(__move_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(x);
            __os.writeInt(y);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_move(Ice.AsyncResult __result)
    {
        __end(__result, __move_name);
    }

    public void
    rotate(int degree)
    {
        rotate(degree, null, false);
    }

    public void
    rotate(int degree, java.util.Map<String, String> __ctx)
    {
        rotate(degree, __ctx, true);
    }

    private void
    rotate(int degree, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _MobileCameraDel __del = (_MobileCameraDel)__delBase;
                __del.rotate(degree, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __rotate_name = "rotate";

    public Ice.AsyncResult begin_rotate(int degree)
    {
        return begin_rotate(degree, null, false, null);
    }

    public Ice.AsyncResult begin_rotate(int degree, java.util.Map<String, String> __ctx)
    {
        return begin_rotate(degree, __ctx, true, null);
    }

    public Ice.AsyncResult begin_rotate(int degree, Ice.Callback __cb)
    {
        return begin_rotate(degree, null, false, __cb);
    }

    public Ice.AsyncResult begin_rotate(int degree, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_rotate(degree, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_rotate(int degree, Callback_Rotatable_rotate __cb)
    {
        return begin_rotate(degree, null, false, __cb);
    }

    public Ice.AsyncResult begin_rotate(int degree, java.util.Map<String, String> __ctx, Callback_Rotatable_rotate __cb)
    {
        return begin_rotate(degree, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_rotate(int degree, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __rotate_name, __cb);
        try
        {
            __result.__prepare(__rotate_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(degree);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_rotate(Ice.AsyncResult __result)
    {
        __end(__result, __rotate_name);
    }

    public void
    zoom(int zoomLevel)
    {
        zoom(zoomLevel, null, false);
    }

    public void
    zoom(int zoomLevel, java.util.Map<String, String> __ctx)
    {
        zoom(zoomLevel, __ctx, true);
    }

    private void
    zoom(int zoomLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _MobileCameraDel __del = (_MobileCameraDel)__delBase;
                __del.zoom(zoomLevel, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __zoom_name = "zoom";

    public Ice.AsyncResult begin_zoom(int zoomLevel)
    {
        return begin_zoom(zoomLevel, null, false, null);
    }

    public Ice.AsyncResult begin_zoom(int zoomLevel, java.util.Map<String, String> __ctx)
    {
        return begin_zoom(zoomLevel, __ctx, true, null);
    }

    public Ice.AsyncResult begin_zoom(int zoomLevel, Ice.Callback __cb)
    {
        return begin_zoom(zoomLevel, null, false, __cb);
    }

    public Ice.AsyncResult begin_zoom(int zoomLevel, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_zoom(zoomLevel, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_zoom(int zoomLevel, Callback_Zoomable_zoom __cb)
    {
        return begin_zoom(zoomLevel, null, false, __cb);
    }

    public Ice.AsyncResult begin_zoom(int zoomLevel, java.util.Map<String, String> __ctx, Callback_Zoomable_zoom __cb)
    {
        return begin_zoom(zoomLevel, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_zoom(int zoomLevel, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __zoom_name, __cb);
        try
        {
            __result.__prepare(__zoom_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeInt(zoomLevel);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_zoom(Ice.AsyncResult __result)
    {
        __end(__result, __zoom_name);
    }

    public static MobileCameraPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        MobileCameraPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MobileCameraPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    MobileCameraPrxHelper __h = new MobileCameraPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MobileCameraPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        MobileCameraPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MobileCameraPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    MobileCameraPrxHelper __h = new MobileCameraPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static MobileCameraPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MobileCameraPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    MobileCameraPrxHelper __h = new MobileCameraPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MobileCameraPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        MobileCameraPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    MobileCameraPrxHelper __h = new MobileCameraPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static MobileCameraPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        MobileCameraPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (MobileCameraPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                MobileCameraPrxHelper __h = new MobileCameraPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static MobileCameraPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        MobileCameraPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            MobileCameraPrxHelper __h = new MobileCameraPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Demo::Dev",
        "::Demo::MobileCamera",
        "::Demo::Movable",
        "::Demo::Rotatable",
        "::Demo::Zoomable",
        "::Ice::Object"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _MobileCameraDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _MobileCameraDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, MobileCameraPrx v)
    {
        __os.writeProxy(v);
    }

    public static MobileCameraPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            MobileCameraPrxHelper result = new MobileCameraPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
