/*
 * main.c
 *
 *  Created on: 08-06-2012
 *      Author: jar
 */

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

struct BOARD {
	char** fields;
	int lights;
};

/* kodowanie Oxabcdefg
 *
 * gdzie
 * a - przewod u góry
 * b - przewod po prawej
 * c - na dole
 * d - po lewej
 * e - zarówka
 * f - zasilanie
 */
const char TOP = 64;
const char RIGHT = 32;
const char BOTTOM = 16;
const char LEFT = 8;
const char LIGHT = 4;
const char SOURCE = 2;
const char NEED = 1;

char META;
char ROTE;
char ALL;

inline char is_source(char c) {
	return c & SOURCE;
}

inline char is_light(char c) {
	return c & LIGHT;
}

inline char is_left(char c) {
	return c & LEFT;
}

inline char is_bottom(char c) {
	return c & BOTTOM;
}
inline char is_right(char c) {
	return c & RIGHT;
}
inline char is_top(char c) {
	return c & TOP;
}

struct mapping {
	char name;
	char index;
	char symbol;

};

struct mapping *mappingString;
int maxMapping = 0;

struct BOARD* board;
int sourceX = 0;
int sourceY = 0;
int w = 0;
int h = 0;
int allLights = 0;

char convert(char* what) {

	int i = 0;
	while (!(mappingString[i].name == what[0]
			&& mappingString[i].index == what[1])) {
		i++;
	}
	return mappingString[i].symbol;
}

char* toStr(char sym) {

	int i = 0;
	while (sym != mappingString[i].symbol && i < maxMapping) {
		i++;
	}
	char* tmp = (char*) malloc(3 * sizeof(char));
	if (i < maxMapping) {
		tmp[0] = mappingString[i].name;
		tmp[1] = mappingString[i].index;
	} else {
		tmp[0] = 'X';
		tmp[1] = 'X';
	}
	tmp[2] = 0;

	return tmp;
}

void fill(int i, char name, char index, char symbol) {
	mappingString[i].name = name;
	mappingString[i].index = index;
	mappingString[i].symbol = symbol;
}

struct BOARD* create() {
	struct BOARD* new = malloc(sizeof(struct BOARD));
	int i;
	new->fields = (char**) malloc((w + 2) * sizeof(char*));

	for (i = 0; i <= (w + 1); ++i) {
		new->fields[i] = malloc((h + 2) * sizeof(char));
	}

	for (i = 0; i < (w + 2); i++) {
		new->fields[i][0] = 0;
		new->fields[i][h + 1] = 0;
	}

	for (i = 0; i < (h + 2); i++) {
		new->fields[0][i] = 0;
		new->fields[w + 1][0] = 0;
	}
	return new;
}

void import() {

	srand(time(NULL ));

	mappingString = (struct mapping*) malloc(26 * sizeof(struct mapping));
	ALL = LEFT | RIGHT | TOP | BOTTOM | NEED;

	META = LIGHT | SOURCE | NEED;
	ROTE = TOP | LEFT | RIGHT | BOTTOM;

	int i = 0;
	fill(i++, 'A', '1', ALL | NEED);
	fill(i++, 'B', '1', LEFT | RIGHT | NEED);
	fill(i++, 'B', '2', TOP | BOTTOM | NEED);
	fill(i++, 'C', '1', BOTTOM | RIGHT | NEED);
	fill(i++, 'C', '2', BOTTOM | LEFT | NEED);
	fill(i++, 'C', '3', TOP | LEFT | NEED);
	fill(i++, 'C', '4', TOP | RIGHT | NEED);
	fill(i++, 'D', '1', ALL | SOURCE | NEED);
	fill(i++, 'E', '1', SOURCE | TOP | BOTTOM | NEED);
	fill(i++, 'E', '2', LEFT | RIGHT | SOURCE | NEED);
	fill(i++, 'F', '1', BOTTOM | RIGHT | NEED | SOURCE);
	fill(i++, 'F', '2', BOTTOM | LEFT | NEED | SOURCE);
	fill(i++, 'F', '3', TOP | LEFT | NEED | SOURCE);
	fill(i++, 'F', '4', TOP | RIGHT | NEED | SOURCE);
	fill(i++, 'G', '1', (ALL ^ TOP) | NEED);
	fill(i++, 'G', '2', (ALL ^ RIGHT) | NEED);
	fill(i++, 'G', '3', (ALL ^ BOTTOM) | NEED);
	fill(i++, 'G', '4', (ALL ^ LEFT) | NEED);
	fill(i++, 'H', '1', (ALL ^ TOP) | NEED | SOURCE);
	fill(i++, 'H', '2', (ALL ^ RIGHT) | NEED | SOURCE);
	fill(i++, 'H', '3', (ALL ^ BOTTOM) | NEED | SOURCE);
	fill(i++, 'H', '4', (ALL ^ LEFT) | NEED | SOURCE);
	fill(i++, 'I', '1', RIGHT | NEED | LIGHT);
	fill(i++, 'I', '2', BOTTOM | NEED | LIGHT);
	fill(i++, 'I', '3', LEFT | NEED | LIGHT);
	fill(i++, 'I', '4', TOP | NEED | LIGHT);
	maxMapping = i;

	char* tmp = (char*) malloc(124);
	scanf("%s", tmp);
	w = atoi(tmp);

	scanf("%s", tmp);
	h = atoi(tmp);

	i = 0;

	board = create();
	i = 0;
	int j = 0;

	for (i = 1; i <= h; ++i) {
		for (j = 1; j <= w; ++j) {
			scanf("%s", tmp);
			board->fields[j][i] = convert(tmp);
			if (is_source(board->fields[j][i])) {
				sourceX = j;
				sourceY = i;
			}
			if (is_light(board->fields[j][i])) {
				board->lights++;
			}
		}
	}

}

void printBoard(struct BOARD* board) {

	int i;
	int j;

	for (j = 1; j < (h + 1); ++j) {
		for (i = 1; i < (w + 1); ++i) {
			printf("%s ", toStr(board->fields[i][j]));
		}
		printf("\n");
	}

}

//for testing
int stack[200];

int index;

void clean() {
	index = 0;
}

void push(int x, int y) {
	stack[index++] = x;
	stack[index++] = y;

//	printf("pushing %d %d\n", x, y);

}

struct point {
	int x;
	int y;
};

struct point pop() {
	struct point p;
	p.y = stack[--index];
	p.x = stack[--index];
	return p;
}

char isEmpty() {
	return index <= 0;
}

struct BOARD* corrent;
char done = 0;

int connected(struct BOARD* board) {

	char** powers = malloc((w + 2) * sizeof(char*));
	int var = 0;
	for (var = 0; var < w + 2; ++var) {
		powers[var] = malloc((h + 2) * sizeof(char));
	}

	int lighter = 0;

	clean();
	push(sourceX, sourceY);

	while (!isEmpty()) {

		struct point p = pop();

		int y = p.y;
		int x = p.x;

		char my = board->fields[x][y];
		//printf("mam %d %d %s\n", x, y, toStr(my));

		//power on
		powers[x][y] = 1;

		//	printf("0\n");

		char toCheck = board->fields[x + 1][y];
		if (is_right(my) && (is_left(toCheck) || is_light(toCheck))
				&& !powers[x + 1][y]) {
			push(x + 1, y);
		}
		//	printf("1\n");
		toCheck = board->fields[x - 1][y];
		if (is_left(my) && (is_right(toCheck) || is_light(toCheck))
				&& !powers[x - 1][y]) {
			push(x - 1, y);
		}

		//	printf("2\n");
		toCheck = board->fields[x][y - 1];
		if (is_top(my) && (is_bottom(toCheck) || is_light(toCheck))
				&& !powers[x][y - 1]) {
			push(x, y - 1);
		}

		//	printf("3\n");
		toCheck = board->fields[x][y + 1];
		if (is_bottom(my) && (is_top(toCheck) || is_light(toCheck))
				&& !powers[x][y + 1]) {
			push(x, y + 1);
		}

		//	printf("4\n");

		if (is_light(my)) {
			lighter++;
		}
	}

	if (allLights == lighter) {
		corrent = board;
		done = 1;
	}
	return lighter;
}

//################ rotations

char rotate90(char c) {
	char ls = c & (META);
	char toRote = (c & ROTE);
	char rotate = (toRote << 1 | toRote >> 3) & ROTE;
	return ls | rotate;
}
char rotate180(char c) {
	char ls = c & (META);
	char toRote = (c & ROTE);
	char rotate = (toRote << 2 | toRote >> 2) & ROTE;
	return ls | rotate;
}

char rotate270(char c) {
	char ls = c & (META);
	char toRote = (c & ROTE);
	char rotate = (toRote << 3 | toRote >> 1) & ROTE;
	return ls | rotate;
}

char mute(char base, int prop) {
	switch (rand() % prop) {
	case 0:
		return (rotate90(base));
	case 1:
		return (rotate180(base));
	case 2:
		return (rotate270(base));
	default:
		return base;
	}
}

void cross(struct BOARD* a, struct BOARD* b, struct BOARD* child) {

	int i = 0;
	int j = 0;

	for (i = 0; i <= w; i++) {

		int c = rand() % (h + 1);

		for (j = 0; j <= c; ++j) {
			child->fields[i][j] = mute(a->fields[i][j], 9);
		}
		for (; j <= h; ++j) {
			child->fields[i][j] = mute(b->fields[i][j], 9);
		}

	}

	child->lights = connected(child);
}

int populationSize = 32;

struct BOARD* createStartPopulation() {
	struct BOARD* newPop = (struct BOARD*) malloc(
			populationSize * sizeof(struct BOARD));

	int i = 0;
	int x, y;

	for (i = 0; i < populationSize; ++i) {
		for (x = 1; x < w + 1; ++x) {
			for (y = 0; y < h + 1; ++y) {
				newPop->fields[x][y] = mute(newPop->fields[x][y], 4);
			}
		}
		newPop[i].lights = connected(newPop + i);
	}

	return newPop;
}

int compare_boards(const struct BOARD *a, const struct BOARD *b) {
	return (int) (a->lights - b->lights);
}

void calculate() {

	struct BOARD* population = createStartPopulation();

	struct BOARD* newPopulation = (struct BOARD*) malloc(
			populationSize * sizeof(struct BOARD));

	while (!done) {
		qsort(population, populationSize, sizeof(struct BOARD), compare_boards);

		int done = 0;
		int nextPopSize = populationSize;
		int parentIndex = 0;

		while (done < populationSize) {
			nextPopSize = nextPopSize / 3 + 1;
			int i = 0;

			struct BOARD* parentA = population = parentIndex;

			for (i = 0; i < nextPopSize; ++i) {
				struct BOARD* parentB = population
						+ (parentIndex
								+ rand() % (populationSize - parentIndex + 1));
				cross(parentA, parentB, newPopulation + done);
				done++;
			}
			parentIndex++;
		}
	}

	struct BOARD* tmp = population;
	population = newPopulation;
	newPopulation = population;
}

int main(int argc, char **argv) {

	import();

	printf("################\n");

	calculate();

	printf("################\n");

	printBoard(corrent);

	return 0;

}
