// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `DevManagerPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Laboratory;

public final class DevManagerPrxHelper extends Ice.ObjectPrxHelperBase implements DevManagerPrx
{
    public String
    connect()
        throws ApplicationException
    {
        return connect(null, false);
    }

    public String
    connect(java.util.Map<String, String> __ctx)
        throws ApplicationException
    {
        return connect(__ctx, true);
    }

    private String
    connect(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ApplicationException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("connect");
                __delBase = __getDelegate(false);
                _DevManagerDel __del = (_DevManagerDel)__delBase;
                return __del.connect(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __connect_name = "connect";

    public Ice.AsyncResult begin_connect()
    {
        return begin_connect(null, false, null);
    }

    public Ice.AsyncResult begin_connect(java.util.Map<String, String> __ctx)
    {
        return begin_connect(__ctx, true, null);
    }

    public Ice.AsyncResult begin_connect(Ice.Callback __cb)
    {
        return begin_connect(null, false, __cb);
    }

    public Ice.AsyncResult begin_connect(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_connect(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_connect(Callback_DevManager_connect __cb)
    {
        return begin_connect(null, false, __cb);
    }

    public Ice.AsyncResult begin_connect(java.util.Map<String, String> __ctx, Callback_DevManager_connect __cb)
    {
        return begin_connect(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_connect(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__connect_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __connect_name, __cb);
        try
        {
            __result.__prepare(__connect_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_connect(Ice.AsyncResult __result)
        throws ApplicationException
    {
        Ice.AsyncResult.__check(__result, this, __connect_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(ApplicationException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    public StatePrx
    devState(String ID)
    {
        return devState(ID, null, false);
    }

    public StatePrx
    devState(String ID, java.util.Map<String, String> __ctx)
    {
        return devState(ID, __ctx, true);
    }

    private StatePrx
    devState(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("devState");
                __delBase = __getDelegate(false);
                _DevManagerDel __del = (_DevManagerDel)__delBase;
                return __del.devState(ID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __devState_name = "devState";

    public Ice.AsyncResult begin_devState(String ID)
    {
        return begin_devState(ID, null, false, null);
    }

    public Ice.AsyncResult begin_devState(String ID, java.util.Map<String, String> __ctx)
    {
        return begin_devState(ID, __ctx, true, null);
    }

    public Ice.AsyncResult begin_devState(String ID, Ice.Callback __cb)
    {
        return begin_devState(ID, null, false, __cb);
    }

    public Ice.AsyncResult begin_devState(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_devState(ID, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_devState(String ID, Callback_DevManager_devState __cb)
    {
        return begin_devState(ID, null, false, __cb);
    }

    public Ice.AsyncResult begin_devState(String ID, java.util.Map<String, String> __ctx, Callback_DevManager_devState __cb)
    {
        return begin_devState(ID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_devState(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__devState_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __devState_name, __cb);
        try
        {
            __result.__prepare(__devState_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public StatePrx end_devState(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __devState_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        StatePrx __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = StatePrxHelper.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public void
    disconnect(String accessToken)
        throws ApplicationException
    {
        disconnect(accessToken, null, false);
    }

    public void
    disconnect(String accessToken, java.util.Map<String, String> __ctx)
        throws ApplicationException
    {
        disconnect(accessToken, __ctx, true);
    }

    private void
    disconnect(String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ApplicationException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("disconnect");
                __delBase = __getDelegate(false);
                _DevManagerDel __del = (_DevManagerDel)__delBase;
                __del.disconnect(accessToken, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __disconnect_name = "disconnect";

    public Ice.AsyncResult begin_disconnect(String accessToken)
    {
        return begin_disconnect(accessToken, null, false, null);
    }

    public Ice.AsyncResult begin_disconnect(String accessToken, java.util.Map<String, String> __ctx)
    {
        return begin_disconnect(accessToken, __ctx, true, null);
    }

    public Ice.AsyncResult begin_disconnect(String accessToken, Ice.Callback __cb)
    {
        return begin_disconnect(accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnect(String accessToken, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_disconnect(accessToken, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_disconnect(String accessToken, Callback_DevManager_disconnect __cb)
    {
        return begin_disconnect(accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_disconnect(String accessToken, java.util.Map<String, String> __ctx, Callback_DevManager_disconnect __cb)
    {
        return begin_disconnect(accessToken, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_disconnect(String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__disconnect_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __disconnect_name, __cb);
        try
        {
            __result.__prepare(__disconnect_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(accessToken);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_disconnect(Ice.AsyncResult __result)
        throws ApplicationException
    {
        Ice.AsyncResult.__check(__result, this, __disconnect_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(ApplicationException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public DevS[]
    getDevsInfo()
    {
        return getDevsInfo(null, false);
    }

    public DevS[]
    getDevsInfo(java.util.Map<String, String> __ctx)
    {
        return getDevsInfo(__ctx, true);
    }

    private DevS[]
    getDevsInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getDevsInfo");
                __delBase = __getDelegate(false);
                _DevManagerDel __del = (_DevManagerDel)__delBase;
                return __del.getDevsInfo(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getDevsInfo_name = "getDevsInfo";

    public Ice.AsyncResult begin_getDevsInfo()
    {
        return begin_getDevsInfo(null, false, null);
    }

    public Ice.AsyncResult begin_getDevsInfo(java.util.Map<String, String> __ctx)
    {
        return begin_getDevsInfo(__ctx, true, null);
    }

    public Ice.AsyncResult begin_getDevsInfo(Ice.Callback __cb)
    {
        return begin_getDevsInfo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDevsInfo(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getDevsInfo(__ctx, true, __cb);
    }

    public Ice.AsyncResult begin_getDevsInfo(Callback_DevManager_getDevsInfo __cb)
    {
        return begin_getDevsInfo(null, false, __cb);
    }

    public Ice.AsyncResult begin_getDevsInfo(java.util.Map<String, String> __ctx, Callback_DevManager_getDevsInfo __cb)
    {
        return begin_getDevsInfo(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getDevsInfo(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getDevsInfo_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getDevsInfo_name, __cb);
        try
        {
            __result.__prepare(__getDevsInfo_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public DevS[] end_getDevsInfo(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getDevsInfo_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        DevS[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = DevSeqHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public void
    relaseDev(String ID, String accessToken)
        throws ApplicationException
    {
        relaseDev(ID, accessToken, null, false);
    }

    public void
    relaseDev(String ID, String accessToken, java.util.Map<String, String> __ctx)
        throws ApplicationException
    {
        relaseDev(ID, accessToken, __ctx, true);
    }

    private void
    relaseDev(String ID, String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ApplicationException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("relaseDev");
                __delBase = __getDelegate(false);
                _DevManagerDel __del = (_DevManagerDel)__delBase;
                __del.relaseDev(ID, accessToken, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __relaseDev_name = "relaseDev";

    public Ice.AsyncResult begin_relaseDev(String ID, String accessToken)
    {
        return begin_relaseDev(ID, accessToken, null, false, null);
    }

    public Ice.AsyncResult begin_relaseDev(String ID, String accessToken, java.util.Map<String, String> __ctx)
    {
        return begin_relaseDev(ID, accessToken, __ctx, true, null);
    }

    public Ice.AsyncResult begin_relaseDev(String ID, String accessToken, Ice.Callback __cb)
    {
        return begin_relaseDev(ID, accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_relaseDev(String ID, String accessToken, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_relaseDev(ID, accessToken, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_relaseDev(String ID, String accessToken, Callback_DevManager_relaseDev __cb)
    {
        return begin_relaseDev(ID, accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_relaseDev(String ID, String accessToken, java.util.Map<String, String> __ctx, Callback_DevManager_relaseDev __cb)
    {
        return begin_relaseDev(ID, accessToken, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_relaseDev(String ID, String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__relaseDev_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __relaseDev_name, __cb);
        try
        {
            __result.__prepare(__relaseDev_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.writeString(accessToken);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_relaseDev(Ice.AsyncResult __result)
        throws ApplicationException
    {
        Ice.AsyncResult.__check(__result, this, __relaseDev_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(ApplicationException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public DevPrx
    reserveDev(String ID, String accessToken)
        throws ApplicationException
    {
        return reserveDev(ID, accessToken, null, false);
    }

    public DevPrx
    reserveDev(String ID, String accessToken, java.util.Map<String, String> __ctx)
        throws ApplicationException
    {
        return reserveDev(ID, accessToken, __ctx, true);
    }

    private DevPrx
    reserveDev(String ID, String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws ApplicationException
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("reserveDev");
                __delBase = __getDelegate(false);
                _DevManagerDel __del = (_DevManagerDel)__delBase;
                return __del.reserveDev(ID, accessToken, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __reserveDev_name = "reserveDev";

    public Ice.AsyncResult begin_reserveDev(String ID, String accessToken)
    {
        return begin_reserveDev(ID, accessToken, null, false, null);
    }

    public Ice.AsyncResult begin_reserveDev(String ID, String accessToken, java.util.Map<String, String> __ctx)
    {
        return begin_reserveDev(ID, accessToken, __ctx, true, null);
    }

    public Ice.AsyncResult begin_reserveDev(String ID, String accessToken, Ice.Callback __cb)
    {
        return begin_reserveDev(ID, accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_reserveDev(String ID, String accessToken, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_reserveDev(ID, accessToken, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_reserveDev(String ID, String accessToken, Callback_DevManager_reserveDev __cb)
    {
        return begin_reserveDev(ID, accessToken, null, false, __cb);
    }

    public Ice.AsyncResult begin_reserveDev(String ID, String accessToken, java.util.Map<String, String> __ctx, Callback_DevManager_reserveDev __cb)
    {
        return begin_reserveDev(ID, accessToken, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_reserveDev(String ID, String accessToken, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__reserveDev_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __reserveDev_name, __cb);
        try
        {
            __result.__prepare(__reserveDev_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.writeString(accessToken);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public DevPrx end_reserveDev(Ice.AsyncResult __result)
        throws ApplicationException
    {
        Ice.AsyncResult.__check(__result, this, __reserveDev_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(ApplicationException __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        DevPrx __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = DevPrxHelper.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public DevS
    viewDev(String ID)
    {
        return viewDev(ID, null, false);
    }

    public DevS
    viewDev(String ID, java.util.Map<String, String> __ctx)
    {
        return viewDev(ID, __ctx, true);
    }

    private DevS
    viewDev(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("viewDev");
                __delBase = __getDelegate(false);
                _DevManagerDel __del = (_DevManagerDel)__delBase;
                return __del.viewDev(ID, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __viewDev_name = "viewDev";

    public Ice.AsyncResult begin_viewDev(String ID)
    {
        return begin_viewDev(ID, null, false, null);
    }

    public Ice.AsyncResult begin_viewDev(String ID, java.util.Map<String, String> __ctx)
    {
        return begin_viewDev(ID, __ctx, true, null);
    }

    public Ice.AsyncResult begin_viewDev(String ID, Ice.Callback __cb)
    {
        return begin_viewDev(ID, null, false, __cb);
    }

    public Ice.AsyncResult begin_viewDev(String ID, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_viewDev(ID, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_viewDev(String ID, Callback_DevManager_viewDev __cb)
    {
        return begin_viewDev(ID, null, false, __cb);
    }

    public Ice.AsyncResult begin_viewDev(String ID, java.util.Map<String, String> __ctx, Callback_DevManager_viewDev __cb)
    {
        return begin_viewDev(ID, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_viewDev(String ID, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__viewDev_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __viewDev_name, __cb);
        try
        {
            __result.__prepare(__viewDev_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(ID);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public DevS end_viewDev(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __viewDev_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        DevS __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = new DevS();
        __ret.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public static DevManagerPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        DevManagerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (DevManagerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    DevManagerPrxHelper __h = new DevManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DevManagerPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        DevManagerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (DevManagerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    DevManagerPrxHelper __h = new DevManagerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static DevManagerPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DevManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    DevManagerPrxHelper __h = new DevManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DevManagerPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        DevManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    DevManagerPrxHelper __h = new DevManagerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static DevManagerPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        DevManagerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (DevManagerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                DevManagerPrxHelper __h = new DevManagerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static DevManagerPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        DevManagerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            DevManagerPrxHelper __h = new DevManagerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Laboratory::DevManager"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _DevManagerDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _DevManagerDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, DevManagerPrx v)
    {
        __os.writeProxy(v);
    }

    public static DevManagerPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            DevManagerPrxHelper result = new DevManagerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
